#! /usr/bin/env python

'''
Make KML map canonical
'''

import sys
import os
import argparse
import subprocess
import tempfile
import xml.etree.ElementTree
import zipfile

def printplacemarks(fhl, kml):
    '''
    Print placemarks
    '''

    tree = xml.etree.ElementTree.parse(kml)
    space = tree.getroot().tag.split('}')[0] + '}'

    placemarks = []
    for placemark in tree.findall('.//%sPlacemark' % space):
        name = placemark.find('%sname' % space).text
        coord = placemark.find('%sPoint/%scoordinates' % (space, space)).text
        placemarks.append((name, coord))

    for name, coord in sorted(placemarks):
        print >> fhl, '  <Placemark>'
        print >> fhl, '   <name>%s</name>' % name
        print >> fhl, '   <Point><coordinates>%s</coordinates></Point>' % coord
        print >> fhl, '  </Placemark>'

def main():
    '''
    Parse arguments
    '''

    parser = argparse.ArgumentParser(description="Make KML map canonical.")
    parser.add_argument('kmz0')
    parser.add_argument('kmz1')
    args = parser.parse_args()

    mapxmldir = os.path.expanduser('~/.mapxml')
    tmpdir = mapxmldir + '/tmp'
    try:
        os.makedirs(tmpdir)
    except OSError:
        pass

    kmls = []
    kmls.append(tempfile.NamedTemporaryFile(dir=tmpdir))
    kmls.append(tempfile.NamedTemporaryFile(dir=tmpdir))
    for i, kmz in enumerate((args.kmz0, args.kmz1)):
        zfl = zipfile.ZipFile(kmz)
        for member in zfl.namelist():
            if member.endswith('.kml'):
                print >> kmls[i], '<?xml version="1.0" encoding="UTF-8"?>'
                print >> kmls[i], '<kml>'
                print >> kmls[i], ' <Document>'
                printplacemarks(kmls[i], zfl.open(member))
                print >> kmls[i], ' </Document>'
                print >> kmls[i], '</kml>'
                kmls[i].flush()
                break

    subprocess.call(['vimdiff'] + [kml.name for kml in kmls])

if __name__ == '__main__':
    sys.exit(main())
